!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ECRYPTFS_AUTH_TOK_FNEK	ecryptfs_kernel.h	340;"	d
ECRYPTFS_AUTH_TOK_INVALID	ecryptfs_kernel.h	339;"	d
ECRYPTFS_CONTAINS_DECRYPTED_KEY	ecryptfs_kernel.h	115;"	d
ECRYPTFS_CONTAINS_ENCRYPTED_KEY	ecryptfs_kernel.h	116;"	d
ECRYPTFS_DAEMON_IN_POLL	ecryptfs_kernel.h	460;"	d
ECRYPTFS_DAEMON_IN_READ	ecryptfs_kernel.h	459;"	d
ECRYPTFS_DAEMON_MISCDEV_OPEN	ecryptfs_kernel.h	462;"	d
ECRYPTFS_DAEMON_ZOMBIE	ecryptfs_kernel.h	461;"	d
ECRYPTFS_DEFAULT_CIPHER	ecryptfs_kernel.h	208;"	d
ECRYPTFS_DEFAULT_EXTENT_SIZE	ecryptfs_kernel.h	84;"	d
ECRYPTFS_DEFAULT_HASH	ecryptfs_kernel.h	210;"	d
ECRYPTFS_DEFAULT_IV_BYTES	ecryptfs_kernel.h	82;"	d
ECRYPTFS_DEFAULT_KEY_BYTES	ecryptfs_kernel.h	209;"	d
ECRYPTFS_DEFAULT_MSG_CTX_ELEMS	ecryptfs_kernel.h	86;"	d
ECRYPTFS_DEFAULT_NUM_USERS	ecryptfs_kernel.h	90;"	d
ECRYPTFS_DEFAULT_SEND_TIMEOUT	ecryptfs_kernel.h	87;"	d
ECRYPTFS_DONT_VALIDATE_HEADER_SIZE	crypto.c	1653;"	d	file:
ECRYPTFS_ENABLE_HMAC	ecryptfs_kernel.h	268;"	d
ECRYPTFS_ENCFN_USE_FEK	ecryptfs_kernel.h	276;"	d
ECRYPTFS_ENCFN_USE_MOUNT_FNEK	ecryptfs_kernel.h	275;"	d
ECRYPTFS_ENCRYPTED	ecryptfs_kernel.h	266;"	d
ECRYPTFS_ENCRYPTED_DENTRY_NAME_LEN	ecryptfs_kernel.h	237;"	d
ECRYPTFS_ENCRYPTED_VIEW_ENABLED	ecryptfs_kernel.h	382;"	d
ECRYPTFS_ENCRYPT_FILENAMES	ecryptfs_kernel.h	274;"	d
ECRYPTFS_ENCRYPT_IV_PAGES	ecryptfs_kernel.h	269;"	d
ECRYPTFS_ENCRYPT_ONLY	ecryptfs_kernel.h	153;"	d
ECRYPTFS_FEK_ENCRYPTED_FILENAME_PREFIX	ecryptfs_kernel.h	233;"	d
ECRYPTFS_FEK_ENCRYPTED_FILENAME_PREFIX_SIZE	ecryptfs_kernel.h	234;"	d
ECRYPTFS_FILENAME_CONTAINS_DECRYPTED	ecryptfs_kernel.h	246;"	d
ECRYPTFS_FILENAME_MIN_RANDOM_PREPEND_BYTES	ecryptfs_kernel.h	229;"	d
ECRYPTFS_FILE_SIZE_BYTES	ecryptfs_kernel.h	207;"	d
ECRYPTFS_FILE_VERSION	ecryptfs_kernel.h	83;"	d
ECRYPTFS_FNEK_ENCRYPTED_FILENAME_PREFIX	ecryptfs_kernel.h	235;"	d
ECRYPTFS_FNEK_ENCRYPTED_FILENAME_PREFIX_SIZE	ecryptfs_kernel.h	236;"	d
ECRYPTFS_GLOBAL_ENCFN_USE_FEK	ecryptfs_kernel.h	386;"	d
ECRYPTFS_GLOBAL_ENCFN_USE_MOUNT_FNEK	ecryptfs_kernel.h	385;"	d
ECRYPTFS_GLOBAL_ENCRYPT_FILENAMES	ecryptfs_kernel.h	384;"	d
ECRYPTFS_GLOBAL_MOUNT_AUTH_TOK_ONLY	ecryptfs_kernel.h	387;"	d
ECRYPTFS_INTERPOSE_FLAG_D_ADD	ecryptfs_kernel.h	637;"	d
ECRYPTFS_KERNEL_H	ecryptfs_kernel.h	34;"	d
ECRYPTFS_KEY_SET	ecryptfs_kernel.h	273;"	d
ECRYPTFS_KEY_VALID	ecryptfs_kernel.h	270;"	d
ECRYPTFS_KTHREAD_ZOMBIE	kthread.c	41;"	d	file:
ECRYPTFS_MAX_CIPHER_NAME_SIZE	ecryptfs_kernel.h	201;"	d
ECRYPTFS_MAX_ENCRYPTED_KEY_BYTES	ecryptfs_kernel.h	81;"	d
ECRYPTFS_MAX_IV_BYTES	ecryptfs_kernel.h	203;"	d
ECRYPTFS_MAX_KEYSET_SIZE	ecryptfs_kernel.h	200;"	d
ECRYPTFS_MAX_KEY_BYTES	ecryptfs_kernel.h	80;"	d
ECRYPTFS_MAX_MSG_CTX_TTL	ecryptfs_kernel.h	88;"	d
ECRYPTFS_MAX_NUM_ENC_KEYS	ecryptfs_kernel.h	202;"	d
ECRYPTFS_MAX_NUM_USERS	ecryptfs_kernel.h	91;"	d
ECRYPTFS_MAX_PASSPHRASE_BYTES	ecryptfs_kernel.h	71;"	d
ECRYPTFS_MAX_PASSWORD_LENGTH	ecryptfs_kernel.h	70;"	d
ECRYPTFS_MAX_PKI_NAME_BYTES	ecryptfs_kernel.h	89;"	d
ECRYPTFS_MAX_SCATTERLIST_LEN	crypto.c	996;"	d	file:
ECRYPTFS_METADATA_IN_XATTR	ecryptfs_kernel.h	271;"	d
ECRYPTFS_MINIMUM_HEADER_EXTENT_SIZE	ecryptfs_kernel.h	85;"	d
ECRYPTFS_MOUNT_CRYPT_STAT_INITIALIZED	ecryptfs_kernel.h	383;"	d
ECRYPTFS_MSG_CTX_STATE_DONE	ecryptfs_kernel.h	433;"	d
ECRYPTFS_MSG_CTX_STATE_FREE	ecryptfs_kernel.h	431;"	d
ECRYPTFS_MSG_CTX_STATE_NO_REPLY	ecryptfs_kernel.h	434;"	d
ECRYPTFS_MSG_CTX_STATE_PENDING	ecryptfs_kernel.h	432;"	d
ECRYPTFS_MSG_HELO	ecryptfs_kernel.h	436;"	d
ECRYPTFS_MSG_QUIT	ecryptfs_kernel.h	437;"	d
ECRYPTFS_MSG_REQUEST	ecryptfs_kernel.h	438;"	d
ECRYPTFS_MSG_RESPONSE	ecryptfs_kernel.h	439;"	d
ECRYPTFS_NEW_FILE	ecryptfs_kernel.h	265;"	d
ECRYPTFS_NON_NULL	ecryptfs_kernel.h	230;"	d
ECRYPTFS_PASSWORD	ecryptfs_kernel.h	/^enum ecryptfs_token_types {ECRYPTFS_PASSWORD, ECRYPTFS_PRIVATE_KEY};$/;"	e	enum:ecryptfs_token_types
ECRYPTFS_PASSWORD_SIG_SIZE	ecryptfs_kernel.h	79;"	d
ECRYPTFS_PERSISTENT_PASSWORD	ecryptfs_kernel.h	129;"	d
ECRYPTFS_PLAINTEXT_PASSTHROUGH_ENABLED	ecryptfs_kernel.h	380;"	d
ECRYPTFS_POLICY_APPLIED	ecryptfs_kernel.h	264;"	d
ECRYPTFS_PREPARE_COMMIT_MODE	ecryptfs_kernel.h	184;"	d
ECRYPTFS_PRIVATE_KEY	ecryptfs_kernel.h	/^enum ecryptfs_token_types {ECRYPTFS_PASSWORD, ECRYPTFS_PRIVATE_KEY};$/;"	e	enum:ecryptfs_token_types
ECRYPTFS_REQ_DROPPED	ecryptfs_kernel.h	626;"	d
ECRYPTFS_REQ_PROCESSED	ecryptfs_kernel.h	625;"	d
ECRYPTFS_REQ_ZOMBIE	ecryptfs_kernel.h	627;"	d
ECRYPTFS_SALT_BYTES	ecryptfs_kernel.h	204;"	d
ECRYPTFS_SALT_SIZE	ecryptfs_kernel.h	72;"	d
ECRYPTFS_SALT_SIZE_HEX	ecryptfs_kernel.h	73;"	d
ECRYPTFS_SECURITY_WARNING	ecryptfs_kernel.h	267;"	d
ECRYPTFS_SESSION_KEY_ENCRYPTION_KEY_SET	ecryptfs_kernel.h	130;"	d
ECRYPTFS_SIG_SIZE	ecryptfs_kernel.h	77;"	d
ECRYPTFS_SIG_SIZE_HEX	ecryptfs_kernel.h	78;"	d
ECRYPTFS_STRUCT_INITIALIZED	ecryptfs_kernel.h	263;"	d
ECRYPTFS_SUPPORTED_FILE_VERSION	ecryptfs_kernel.h	48;"	d
ECRYPTFS_TAG_11_PACKET_TYPE	ecryptfs_kernel.h	214;"	d
ECRYPTFS_TAG_1_PACKET_TYPE	ecryptfs_kernel.h	212;"	d
ECRYPTFS_TAG_3_PACKET_TYPE	ecryptfs_kernel.h	213;"	d
ECRYPTFS_TAG_64_PACKET_TYPE	ecryptfs_kernel.h	215;"	d
ECRYPTFS_TAG_65_PACKET_TYPE	ecryptfs_kernel.h	216;"	d
ECRYPTFS_TAG_66_PACKET_TYPE	ecryptfs_kernel.h	217;"	d
ECRYPTFS_TAG_67_PACKET_TYPE	ecryptfs_kernel.h	218;"	d
ECRYPTFS_TAG_70_DIGEST	ecryptfs_kernel.h	211;"	d
ECRYPTFS_TAG_70_DIGEST_SIZE	ecryptfs_kernel.h	232;"	d
ECRYPTFS_TAG_70_PACKET_TYPE	ecryptfs_kernel.h	219;"	d
ECRYPTFS_TAG_71_PACKET_TYPE	ecryptfs_kernel.h	221;"	d
ECRYPTFS_TAG_72_PACKET_TYPE	ecryptfs_kernel.h	223;"	d
ECRYPTFS_TAG_73_PACKET_TYPE	ecryptfs_kernel.h	225;"	d
ECRYPTFS_UNLINK_SIGS	ecryptfs_kernel.h	277;"	d
ECRYPTFS_USERSPACE_SHOULD_TRY_TO_DECRYPT	ecryptfs_kernel.h	113;"	d
ECRYPTFS_USERSPACE_SHOULD_TRY_TO_ENCRYPT	ecryptfs_kernel.h	114;"	d
ECRYPTFS_VALIDATE_HEADER_SIZE	crypto.c	1654;"	d	file:
ECRYPTFS_VERSIONING_DEVMISC	ecryptfs_kernel.h	59;"	d
ECRYPTFS_VERSIONING_FILENAME_ENCRYPTION	ecryptfs_kernel.h	61;"	d
ECRYPTFS_VERSIONING_GCM	ecryptfs_kernel.h	62;"	d
ECRYPTFS_VERSIONING_HMAC	ecryptfs_kernel.h	60;"	d
ECRYPTFS_VERSIONING_MASK	ecryptfs_kernel.h	63;"	d
ECRYPTFS_VERSIONING_MULTKEY	ecryptfs_kernel.h	58;"	d
ECRYPTFS_VERSIONING_PASSPHRASE	ecryptfs_kernel.h	53;"	d
ECRYPTFS_VERSIONING_PLAINTEXT_PASSTHROUGH	ecryptfs_kernel.h	55;"	d
ECRYPTFS_VERSIONING_POLICY	ecryptfs_kernel.h	56;"	d
ECRYPTFS_VERSIONING_PUBKEY	ecryptfs_kernel.h	54;"	d
ECRYPTFS_VERSIONING_XATTR	ecryptfs_kernel.h	57;"	d
ECRYPTFS_VERSION_MAJOR	ecryptfs_kernel.h	46;"	d
ECRYPTFS_VERSION_MINOR	ecryptfs_kernel.h	47;"	d
ECRYPTFS_VIEW_AS_ENCRYPTED	ecryptfs_kernel.h	272;"	d
ECRYPTFS_WRITEPAGE_MODE	ecryptfs_kernel.h	185;"	d
ECRYPTFS_XATTR_METADATA_ENABLED	ecryptfs_kernel.h	381;"	d
ECRYPTFS_XATTR_NAME	ecryptfs_kernel.h	92;"	d
MAGIC_ECRYPTFS_MARKER	ecryptfs_kernel.h	205;"	d
MAGIC_ECRYPTFS_MARKER_SIZE_BYTES	ecryptfs_kernel.h	206;"	d
MD5_DIGEST_SIZE	ecryptfs_kernel.h	231;"	d
RFC2440_CIPHER_AES_128	ecryptfs_kernel.h	97;"	d
RFC2440_CIPHER_AES_192	ecryptfs_kernel.h	98;"	d
RFC2440_CIPHER_AES_256	ecryptfs_kernel.h	99;"	d
RFC2440_CIPHER_BLOWFISH	ecryptfs_kernel.h	96;"	d
RFC2440_CIPHER_CAST_5	ecryptfs_kernel.h	95;"	d
RFC2440_CIPHER_CAST_6	ecryptfs_kernel.h	101;"	d
RFC2440_CIPHER_DES3_EDE	ecryptfs_kernel.h	94;"	d
RFC2440_CIPHER_RSA	ecryptfs_kernel.h	103;"	d
RFC2440_CIPHER_TWOFISH	ecryptfs_kernel.h	100;"	d
__ecryptfs_printk	main.c	/^void __ecryptfs_printk(const char *fmt, ...)$/;"	f
__this_module	ecryptfs.mod.c	/^struct module __this_module$/;"	v	typeref:struct:module
__used	ecryptfs.mod.c	/^__used$/;"	v	file:
__used	ecryptfs.mod.c	/^__used$/;"	v	typeref:struct:____versions	file:
attr_group	main.c	/^static struct attribute_group attr_group = {$/;"	v	typeref:struct:attribute_group	file:
attributes	main.c	/^static struct attribute *attributes[] = {$/;"	v	typeref:struct:attribute	file:
auth_tok	ecryptfs_kernel.h	/^	struct ecryptfs_auth_tok *auth_tok;$/;"	m	struct:ecryptfs_auth_tok_list	typeref:struct:ecryptfs_auth_tok_list::ecryptfs_auth_tok
auth_tok	ecryptfs_kernel.h	/^	struct ecryptfs_auth_tok auth_tok;$/;"	m	struct:ecryptfs_auth_tok_list_item	typeref:struct:ecryptfs_auth_tok_list_item::ecryptfs_auth_tok
auth_tok	keystore.c	/^	struct ecryptfs_auth_tok *auth_tok;$/;"	m	struct:ecryptfs_parse_tag_70_packet_silly_stack	typeref:struct:ecryptfs_parse_tag_70_packet_silly_stack::ecryptfs_auth_tok	file:
auth_tok	keystore.c	/^	struct ecryptfs_auth_tok *auth_tok;$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	typeref:struct:ecryptfs_write_tag_70_packet_silly_stack::ecryptfs_auth_tok	file:
bdi	ecryptfs_kernel.h	/^	struct backing_dev_info bdi;$/;"	m	struct:ecryptfs_sb_info	typeref:struct:ecryptfs_sb_info::backing_dev_info
block_aligned_filename	keystore.c	/^	char *block_aligned_filename;$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	file:
block_aligned_filename_size	keystore.c	/^	size_t block_aligned_filename_size;$/;"	m	struct:ecryptfs_parse_tag_70_packet_silly_stack	file:
block_aligned_filename_size	keystore.c	/^	size_t block_aligned_filename_size;$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	file:
block_size	keystore.c	/^	size_t block_size;$/;"	m	struct:ecryptfs_parse_tag_70_packet_silly_stack	file:
block_size	keystore.c	/^	size_t block_size;$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	file:
cache	main.c	/^	struct kmem_cache **cache;$/;"	m	struct:ecryptfs_cache_info	typeref:struct:ecryptfs_cache_info::kmem_cache	file:
cipher	ecryptfs_kernel.h	/^	unsigned char cipher[ECRYPTFS_MAX_CIPHER_NAME_SIZE];$/;"	m	struct:ecryptfs_crypt_stat
cipher_code	crypto.c	/^	u8 cipher_code;$/;"	m	struct:ecryptfs_cipher_code_str_map_elem	file:
cipher_code	keystore.c	/^	u8 cipher_code;$/;"	m	struct:ecryptfs_parse_tag_70_packet_silly_stack	file:
cipher_code	keystore.c	/^	u8 cipher_code;$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	file:
cipher_name	ecryptfs_kernel.h	/^	unsigned char cipher_name[ECRYPTFS_MAX_CIPHER_NAME_SIZE + 1];$/;"	m	struct:ecryptfs_key_tfm
cipher_str	crypto.c	/^	char cipher_str[16];$/;"	m	struct:ecryptfs_cipher_code_str_map_elem	file:
cipher_string	keystore.c	/^	char cipher_string[ECRYPTFS_MAX_CIPHER_NAME_SIZE];$/;"	m	struct:ecryptfs_parse_tag_70_packet_silly_stack	file:
contains_ecryptfs_marker	crypto.c	/^static int contains_ecryptfs_marker(char *data)$/;"	f	file:
counter	ecryptfs_kernel.h	/^	u32 counter;$/;"	m	struct:ecryptfs_msg_ctx
crypt_stat	ecryptfs_kernel.h	/^	struct ecryptfs_crypt_stat *crypt_stat;$/;"	m	struct:ecryptfs_dentry_info	typeref:struct:ecryptfs_dentry_info::ecryptfs_crypt_stat
crypt_stat	ecryptfs_kernel.h	/^	struct ecryptfs_crypt_stat *crypt_stat;$/;"	m	struct:ecryptfs_file_info	typeref:struct:ecryptfs_file_info::ecryptfs_crypt_stat
crypt_stat	ecryptfs_kernel.h	/^	struct ecryptfs_crypt_stat crypt_stat;$/;"	m	struct:ecryptfs_inode_info	typeref:struct:ecryptfs_inode_info::ecryptfs_crypt_stat
crypt_stat_list	ecryptfs_kernel.h	/^	struct list_head crypt_stat_list;$/;"	m	struct:ecryptfs_filename	typeref:struct:ecryptfs_filename::list_head
crypt_stat_list	ecryptfs_kernel.h	/^	struct list_head crypt_stat_list;$/;"	m	struct:ecryptfs_key_sig	typeref:struct:ecryptfs_key_sig::list_head
cs_hash_tfm_mutex	ecryptfs_kernel.h	/^	struct mutex cs_hash_tfm_mutex;$/;"	m	struct:ecryptfs_crypt_stat	typeref:struct:ecryptfs_crypt_stat::mutex
cs_mutex	ecryptfs_kernel.h	/^	struct mutex cs_mutex;$/;"	m	struct:ecryptfs_crypt_stat	typeref:struct:ecryptfs_crypt_stat::mutex
cs_tfm_mutex	ecryptfs_kernel.h	/^	struct mutex cs_tfm_mutex;$/;"	m	struct:ecryptfs_crypt_stat	typeref:struct:ecryptfs_crypt_stat::mutex
ctor	main.c	/^	void (*ctor)(void *obj);$/;"	m	struct:ecryptfs_cache_info	file:
daemon_out_list	ecryptfs_kernel.h	/^	struct list_head daemon_out_list;$/;"	m	struct:ecryptfs_msg_ctx	typeref:struct:ecryptfs_msg_ctx::list_head
data	ecryptfs_kernel.h	/^	u8 data[];$/;"	m	struct:ecryptfs_message
data	ecryptfs_kernel.h	/^	u8 data[];$/;"	m	struct:ecryptfs_private_key
data_len	ecryptfs_kernel.h	/^	u32 data_len;$/;"	m	struct:ecryptfs_message
data_len	ecryptfs_kernel.h	/^	u32 data_len;$/;"	m	struct:ecryptfs_private_key
decrypt_passphrase_encrypted_session_key	keystore.c	/^decrypt_passphrase_encrypted_session_key(struct ecryptfs_auth_tok *auth_tok,$/;"	f	file:
decrypt_pki_encrypted_session_key	keystore.c	/^decrypt_pki_encrypted_session_key(struct ecryptfs_auth_tok *auth_tok,$/;"	f	file:
decrypt_scatterlist	crypto.c	/^static int decrypt_scatterlist(struct ecryptfs_crypt_stat *crypt_stat,$/;"	f	file:
decrypted_filename	keystore.c	/^	char *decrypted_filename;$/;"	m	struct:ecryptfs_parse_tag_70_packet_silly_stack	file:
decrypted_key	ecryptfs_kernel.h	/^	u8 decrypted_key[ECRYPTFS_MAX_KEY_BYTES];$/;"	m	struct:ecryptfs_session_key
decrypted_key_size	ecryptfs_kernel.h	/^	u32 decrypted_key_size;$/;"	m	struct:ecryptfs_session_key
dentry	file.c	/^	struct dentry *dentry;$/;"	m	struct:ecryptfs_getdents_callback	typeref:struct:ecryptfs_getdents_callback::dentry	file:
dentry_name	ecryptfs_kernel.h	/^	char dentry_name[ECRYPTFS_ENCRYPTED_DENTRY_NAME_LEN + 1];$/;"	m	struct:ecryptfs_filename
desc	keystore.c	/^	struct blkcipher_desc desc;$/;"	m	struct:ecryptfs_parse_tag_70_packet_silly_stack	typeref:struct:ecryptfs_parse_tag_70_packet_silly_stack::blkcipher_desc	file:
desc	keystore.c	/^	struct blkcipher_desc desc;$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	typeref:struct:ecryptfs_write_tag_70_packet_silly_stack::blkcipher_desc	file:
dirent	file.c	/^	void *dirent;$/;"	m	struct:ecryptfs_getdents_callback	file:
do_sysfs_registration	main.c	/^static int do_sysfs_registration(void)$/;"	f	file:
do_sysfs_unregistration	main.c	/^static void do_sysfs_unregistration(void)$/;"	f	file:
dst_sg	keystore.c	/^	struct scatterlist dst_sg;$/;"	m	struct:ecryptfs_parse_tag_70_packet_silly_stack	typeref:struct:ecryptfs_parse_tag_70_packet_silly_stack::scatterlist	file:
dst_sg	keystore.c	/^	struct scatterlist dst_sg;$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	typeref:struct:ecryptfs_write_tag_70_packet_silly_stack::scatterlist	file:
ecryptfs-objs	Makefile	/^ecryptfs-objs := dentry.o file.o inode.o main.o super.o mmap.o read_write.o crypto.o keystore.o messaging.o miscdev.o kthread.o debug.o$/;"	m
ecryptfs_acquire_free_msg_ctx	messaging.c	/^static int ecryptfs_acquire_free_msg_ctx(struct ecryptfs_msg_ctx **msg_ctx)$/;"	f	file:
ecryptfs_add_global_auth_tok	keystore.c	/^ecryptfs_add_global_auth_tok(struct ecryptfs_mount_crypt_stat *mount_crypt_stat,$/;"	f
ecryptfs_add_keysig	keystore.c	/^int ecryptfs_add_keysig(struct ecryptfs_crypt_stat *crypt_stat, char *sig)$/;"	f
ecryptfs_add_new_key_tfm	crypto.c	/^ecryptfs_add_new_key_tfm(struct ecryptfs_key_tfm **key_tfm, char *cipher_name,$/;"	f
ecryptfs_alloc_inode	super.c	/^static struct inode *ecryptfs_alloc_inode(struct super_block *sb)$/;"	f	file:
ecryptfs_aops	mmap.c	/^const struct address_space_operations ecryptfs_aops = {$/;"	v	typeref:struct:address_space_operations
ecryptfs_auth_tok	ecryptfs_kernel.h	/^struct ecryptfs_auth_tok {$/;"	s
ecryptfs_auth_tok_list	ecryptfs_kernel.h	/^struct ecryptfs_auth_tok_list {$/;"	s
ecryptfs_auth_tok_list_item	ecryptfs_kernel.h	/^struct ecryptfs_auth_tok_list_item {$/;"	s
ecryptfs_auth_tok_list_item_cache	keystore.c	/^struct kmem_cache *ecryptfs_auth_tok_list_item_cache;$/;"	v	typeref:struct:kmem_cache
ecryptfs_bmap	mmap.c	/^static sector_t ecryptfs_bmap(struct address_space *mapping, sector_t block)$/;"	f	file:
ecryptfs_cache_info	main.c	/^static struct ecryptfs_cache_info {$/;"	s	file:
ecryptfs_cache_infos	main.c	/^} ecryptfs_cache_infos[] = {$/;"	v	typeref:struct:ecryptfs_cache_info	file:
ecryptfs_calculate_md5	crypto.c	/^static int ecryptfs_calculate_md5(char *dst,$/;"	f	file:
ecryptfs_cipher_code_str_map	crypto.c	/^ecryptfs_cipher_code_str_map[] = {$/;"	v	typeref:struct:ecryptfs_cipher_code_str_map_elem	file:
ecryptfs_cipher_code_str_map_elem	crypto.c	/^struct ecryptfs_cipher_code_str_map_elem {$/;"	s	file:
ecryptfs_cipher_code_to_string	crypto.c	/^int ecryptfs_cipher_code_to_string(char *str, u8 cipher_code)$/;"	f
ecryptfs_code_for_cipher_string	crypto.c	/^u8 ecryptfs_code_for_cipher_string(char *cipher_name, size_t key_bytes)$/;"	f
ecryptfs_compat_ioctl	file.c	/^ecryptfs_compat_ioctl(struct file *file, unsigned int cmd, unsigned long arg)$/;"	f	file:
ecryptfs_compute_root_iv	crypto.c	/^int ecryptfs_compute_root_iv(struct ecryptfs_crypt_stat *crypt_stat)$/;"	f
ecryptfs_copy_filename	crypto.c	/^static int ecryptfs_copy_filename(char **copied_name, size_t *copied_name_size,$/;"	f	file:
ecryptfs_copy_mount_wide_flags_to_inode_flags	crypto.c	/^static void ecryptfs_copy_mount_wide_flags_to_inode_flags($/;"	f	file:
ecryptfs_copy_mount_wide_sigs_to_inode_sigs	crypto.c	/^static int ecryptfs_copy_mount_wide_sigs_to_inode_sigs($/;"	f	file:
ecryptfs_copy_up_encrypted_with_header	mmap.c	/^ecryptfs_copy_up_encrypted_with_header(struct page *page,$/;"	f	file:
ecryptfs_create	inode.c	/^ecryptfs_create(struct inode *directory_inode, struct dentry *ecryptfs_dentry,$/;"	f	file:
ecryptfs_create_underlying_file	inode.c	/^ecryptfs_create_underlying_file(struct inode *lower_dir_inode,$/;"	f	file:
ecryptfs_crypt_stat	ecryptfs_kernel.h	/^struct ecryptfs_crypt_stat {$/;"	s
ecryptfs_crypto_api_algify_cipher_name	crypto.c	/^static int ecryptfs_crypto_api_algify_cipher_name(char **algified_name,$/;"	f	file:
ecryptfs_d_release	dentry.c	/^static void ecryptfs_d_release(struct dentry *dentry)$/;"	f	file:
ecryptfs_d_revalidate	dentry.c	/^static int ecryptfs_d_revalidate(struct dentry *dentry, struct nameidata *nd)$/;"	f	file:
ecryptfs_daemon	ecryptfs_kernel.h	/^struct ecryptfs_daemon {$/;"	s
ecryptfs_daemon_hash	messaging.c	/^static struct hlist_head *ecryptfs_daemon_hash;$/;"	v	typeref:struct:hlist_head	file:
ecryptfs_daemon_hash_mux	messaging.c	/^struct mutex ecryptfs_daemon_hash_mux;$/;"	v	typeref:struct:mutex
ecryptfs_decode_and_decrypt_filename	crypto.c	/^int ecryptfs_decode_and_decrypt_filename(char **plaintext_name,$/;"	f
ecryptfs_decode_from_filename	crypto.c	/^ecryptfs_decode_from_filename(unsigned char *dst, size_t *dst_size,$/;"	f	file:
ecryptfs_decrypt_extent	crypto.c	/^static int ecryptfs_decrypt_extent(struct page *page,$/;"	f	file:
ecryptfs_decrypt_page	crypto.c	/^int ecryptfs_decrypt_page(struct page *page)$/;"	f
ecryptfs_decrypt_page_offset	crypto.c	/^ecryptfs_decrypt_page_offset(struct ecryptfs_crypt_stat *crypt_stat,$/;"	f	file:
ecryptfs_decrypt_pages	crypto.c	/^int ecryptfs_decrypt_pages(struct page **pgs, unsigned int nr_pages)$/;"	f
ecryptfs_dentry_info	ecryptfs_kernel.h	/^struct ecryptfs_dentry_info {$/;"	s
ecryptfs_dentry_info_cache	dentry.c	/^struct kmem_cache *ecryptfs_dentry_info_cache;$/;"	v	typeref:struct:kmem_cache
ecryptfs_dentry_to_lower	ecryptfs_kernel.h	/^ecryptfs_dentry_to_lower(struct dentry *dentry)$/;"	f
ecryptfs_dentry_to_lower_mnt	ecryptfs_kernel.h	/^ecryptfs_dentry_to_lower_mnt(struct dentry *dentry)$/;"	f
ecryptfs_dentry_to_private	ecryptfs_kernel.h	/^ecryptfs_dentry_to_private(struct dentry *dentry)$/;"	f
ecryptfs_derive_iv	crypto.c	/^int ecryptfs_derive_iv(char *iv, struct ecryptfs_crypt_stat *crypt_stat,$/;"	f
ecryptfs_destroy_crypt_stat	crypto.c	/^void ecryptfs_destroy_crypt_stat(struct ecryptfs_crypt_stat *crypt_stat)$/;"	f
ecryptfs_destroy_crypto	crypto.c	/^int ecryptfs_destroy_crypto(void)$/;"	f
ecryptfs_destroy_ecryptfs_miscdev	miscdev.c	/^void ecryptfs_destroy_ecryptfs_miscdev(void)$/;"	f
ecryptfs_destroy_inode	super.c	/^static void ecryptfs_destroy_inode(struct inode *inode)$/;"	f	file:
ecryptfs_destroy_kthread	kthread.c	/^void ecryptfs_destroy_kthread(void)$/;"	f
ecryptfs_destroy_mount_crypt_stat	crypto.c	/^void ecryptfs_destroy_mount_crypt_stat($/;"	f
ecryptfs_dir_fops	file.c	/^const struct file_operations ecryptfs_dir_fops = {$/;"	v	typeref:struct:file_operations
ecryptfs_dir_iops	inode.c	/^const struct inode_operations ecryptfs_dir_iops = {$/;"	v	typeref:struct:inode_operations
ecryptfs_do_create	inode.c	/^ecryptfs_do_create(struct inode *directory_inode,$/;"	f	file:
ecryptfs_dops	dentry.c	/^const struct dentry_operations ecryptfs_dops = {$/;"	v	typeref:struct:dentry_operations
ecryptfs_dump_auth_tok	debug.c	/^void ecryptfs_dump_auth_tok(struct ecryptfs_auth_tok *auth_tok)$/;"	f
ecryptfs_dump_hex	debug.c	/^void ecryptfs_dump_hex(char *data, int bytes)$/;"	f
ecryptfs_encode_for_filename	crypto.c	/^void ecryptfs_encode_for_filename(unsigned char *dst, size_t *dst_size,$/;"	f
ecryptfs_encrypt_and_encode_filename	crypto.c	/^int ecryptfs_encrypt_and_encode_filename($/;"	f
ecryptfs_encrypt_extent	crypto.c	/^static int ecryptfs_encrypt_extent(struct page *enc_extent_page,$/;"	f	file:
ecryptfs_encrypt_filename	crypto.c	/^ecryptfs_encrypt_filename(struct ecryptfs_filename *filename,$/;"	f	file:
ecryptfs_encrypt_page	crypto.c	/^int ecryptfs_encrypt_page(struct page *page)$/;"	f
ecryptfs_encrypt_page_offset	crypto.c	/^ecryptfs_encrypt_page_offset(struct ecryptfs_crypt_stat *crypt_stat,$/;"	f	file:
ecryptfs_encrypt_pages	crypto.c	/^int ecryptfs_encrypt_pages(struct page **pgs, unsigned int nr_pages)$/;"	f
ecryptfs_encrypt_pages2	crypto.c	/^int ecryptfs_encrypt_pages2(struct page **pgs, unsigned int nr_pages)$/;"	f
ecryptfs_evict_inode	super.c	/^static void ecryptfs_evict_inode(struct inode *inode)$/;"	f	file:
ecryptfs_exit	main.c	/^static void __exit ecryptfs_exit(void)$/;"	f	file:
ecryptfs_exorcise_daemon	messaging.c	/^int ecryptfs_exorcise_daemon(struct ecryptfs_daemon *daemon)$/;"	f
ecryptfs_fasync	file.c	/^static int ecryptfs_fasync(int fd, struct file *file, int flag)$/;"	f	file:
ecryptfs_file_info	ecryptfs_kernel.h	/^struct ecryptfs_file_info {$/;"	s
ecryptfs_file_info_cache	file.c	/^struct kmem_cache *ecryptfs_file_info_cache;$/;"	v	typeref:struct:kmem_cache
ecryptfs_file_to_lower	ecryptfs_kernel.h	/^static inline struct file *ecryptfs_file_to_lower(struct file *file)$/;"	f
ecryptfs_file_to_private	ecryptfs_kernel.h	/^ecryptfs_file_to_private(struct file *file)$/;"	f
ecryptfs_file_write	file.c	/^static ssize_t ecryptfs_file_write(struct file *f, const char __user *buf,$/;"	f	file:
ecryptfs_filename	ecryptfs_kernel.h	/^struct ecryptfs_filename {$/;"	s
ecryptfs_filldir	file.c	/^ecryptfs_filldir(void *dirent, const char *lower_name, int lower_namelen,$/;"	f	file:
ecryptfs_find_auth_tok_for_sig	keystore.c	/^ecryptfs_find_auth_tok_for_sig($/;"	f	file:
ecryptfs_find_daemon_by_euid	messaging.c	/^int ecryptfs_find_daemon_by_euid(struct ecryptfs_daemon **daemon, uid_t euid,$/;"	f
ecryptfs_find_global_auth_tok_for_sig	keystore.c	/^ecryptfs_find_global_auth_tok_for_sig($/;"	f	file:
ecryptfs_flag_map	crypto.c	/^static struct ecryptfs_flag_map_elem ecryptfs_flag_map[] = {$/;"	v	typeref:struct:ecryptfs_flag_map_elem	file:
ecryptfs_flag_map_elem	crypto.c	/^struct ecryptfs_flag_map_elem {$/;"	s	file:
ecryptfs_flush	file.c	/^static int ecryptfs_flush(struct file *file, fl_owner_t td)$/;"	f	file:
ecryptfs_follow_link	inode.c	/^static void *ecryptfs_follow_link(struct dentry *dentry, struct nameidata *nd)$/;"	f	file:
ecryptfs_free_kmem_caches	main.c	/^static void ecryptfs_free_kmem_caches(void)$/;"	f	file:
ecryptfs_from_hex	crypto.c	/^void ecryptfs_from_hex(char *dst, char *src, int dst_size)$/;"	f
ecryptfs_fs_type	main.c	/^static struct file_system_type ecryptfs_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
ecryptfs_fs_type	main.c	/^static struct file_system_type ecryptfs_fs_type;$/;"	v	typeref:struct:file_system_type	file:
ecryptfs_fsync	file.c	/^ecryptfs_fsync(struct file *file, int datasync)$/;"	f	file:
ecryptfs_generate_key_packet_set	keystore.c	/^ecryptfs_generate_key_packet_set(char *dest_base,$/;"	f
ecryptfs_generate_new_key	crypto.c	/^static void ecryptfs_generate_new_key(struct ecryptfs_crypt_stat *crypt_stat)$/;"	f	file:
ecryptfs_get_auth_tok_sig	keystore.c	/^ecryptfs_get_auth_tok_sig(char **sig, struct ecryptfs_auth_tok *auth_tok)$/;"	f	file:
ecryptfs_get_inode	main.c	/^static struct inode *ecryptfs_get_inode(struct inode *lower_inode,$/;"	f	file:
ecryptfs_get_key_payload_data	ecryptfs_kernel.h	/^ecryptfs_get_key_payload_data(struct key *key)$/;"	f
ecryptfs_get_locked_page	mmap.c	/^struct page *ecryptfs_get_locked_page(struct inode *inode, loff_t index)$/;"	f
ecryptfs_get_tfm_and_mutex_for_cipher_name	crypto.c	/^int ecryptfs_get_tfm_and_mutex_for_cipher_name(struct crypto_blkcipher **tfm,$/;"	f
ecryptfs_get_zeroed_pages	crypto.c	/^static unsigned long ecryptfs_get_zeroed_pages(gfp_t gfp_mask,$/;"	f	file:
ecryptfs_getattr	inode.c	/^int ecryptfs_getattr(struct vfsmount *mnt, struct dentry *dentry,$/;"	f
ecryptfs_getattr_link	inode.c	/^int ecryptfs_getattr_link(struct vfsmount *mnt, struct dentry *dentry,$/;"	f
ecryptfs_getdents_callback	file.c	/^struct ecryptfs_getdents_callback {$/;"	s	file:
ecryptfs_getxattr	inode.c	/^ecryptfs_getxattr(struct dentry *dentry, const char *name, void *value,$/;"	f	file:
ecryptfs_getxattr_lower	inode.c	/^ecryptfs_getxattr_lower(struct dentry *lower_dentry, const char *name,$/;"	f
ecryptfs_global_auth_tok	ecryptfs_kernel.h	/^struct ecryptfs_global_auth_tok {$/;"	s
ecryptfs_global_auth_tok_cache	keystore.c	/^struct kmem_cache *ecryptfs_global_auth_tok_cache;$/;"	v	typeref:struct:kmem_cache
ecryptfs_hash_bits	messaging.c	/^static int ecryptfs_hash_bits;$/;"	v	file:
ecryptfs_header_cache_1	crypto.c	/^struct kmem_cache *ecryptfs_header_cache_1;$/;"	v	typeref:struct:kmem_cache
ecryptfs_header_cache_2	crypto.c	/^struct kmem_cache *ecryptfs_header_cache_2;$/;"	v	typeref:struct:kmem_cache
ecryptfs_i_callback	super.c	/^static void ecryptfs_i_callback(struct rcu_head *head)$/;"	f	file:
ecryptfs_init	main.c	/^static int __init ecryptfs_init(void)$/;"	f	file:
ecryptfs_init_crypt_ctx	crypto.c	/^int ecryptfs_init_crypt_ctx(struct ecryptfs_crypt_stat *crypt_stat)$/;"	f
ecryptfs_init_crypt_stat	crypto.c	/^ecryptfs_init_crypt_stat(struct ecryptfs_crypt_stat *crypt_stat)$/;"	f
ecryptfs_init_crypto	crypto.c	/^int __init ecryptfs_init_crypto(void)$/;"	f
ecryptfs_init_ecryptfs_miscdev	miscdev.c	/^int __init ecryptfs_init_ecryptfs_miscdev(void)$/;"	f
ecryptfs_init_global_auth_toks	main.c	/^static int ecryptfs_init_global_auth_toks($/;"	f	file:
ecryptfs_init_inode	super.c	/^void ecryptfs_init_inode(struct inode *inode, struct inode *lower_inode)$/;"	f
ecryptfs_init_kmem_caches	main.c	/^static int ecryptfs_init_kmem_caches(void)$/;"	f	file:
ecryptfs_init_kthread	kthread.c	/^int __init ecryptfs_init_kthread(void)$/;"	f
ecryptfs_init_messaging	messaging.c	/^int __init ecryptfs_init_messaging(void)$/;"	f
ecryptfs_init_mount_crypt_stat	main.c	/^static void ecryptfs_init_mount_crypt_stat($/;"	f	file:
ecryptfs_init_persistent_file	main.c	/^int ecryptfs_init_persistent_file(struct dentry *ecryptfs_dentry)$/;"	f
ecryptfs_initialize_file	inode.c	/^static int ecryptfs_initialize_file(struct dentry *ecryptfs_dentry)$/;"	f	file:
ecryptfs_inode_info	ecryptfs_kernel.h	/^struct ecryptfs_inode_info {$/;"	s
ecryptfs_inode_info_cache	super.c	/^struct kmem_cache *ecryptfs_inode_info_cache;$/;"	v	typeref:struct:kmem_cache
ecryptfs_inode_set	inode.c	/^int ecryptfs_inode_set(struct inode *inode, void *lower_inode)$/;"	f
ecryptfs_inode_test	inode.c	/^int ecryptfs_inode_test(struct inode *inode, void *candidate_lower_inode)$/;"	f
ecryptfs_inode_to_lower	ecryptfs_kernel.h	/^static inline struct inode *ecryptfs_inode_to_lower(struct inode *inode)$/;"	f
ecryptfs_inode_to_private	ecryptfs_kernel.h	/^ecryptfs_inode_to_private(struct inode *inode)$/;"	f
ecryptfs_interpose	main.c	/^int ecryptfs_interpose(struct dentry *lower_dentry, struct dentry *dentry,$/;"	f
ecryptfs_key_record	ecryptfs_kernel.h	/^struct ecryptfs_key_record {$/;"	s
ecryptfs_key_record_cache	keystore.c	/^struct kmem_cache *ecryptfs_key_record_cache;$/;"	v	typeref:struct:kmem_cache
ecryptfs_key_sig	ecryptfs_kernel.h	/^struct ecryptfs_key_sig {$/;"	s
ecryptfs_key_sig_cache	keystore.c	/^struct kmem_cache *ecryptfs_key_sig_cache;$/;"	v	typeref:struct:kmem_cache
ecryptfs_key_tfm	ecryptfs_kernel.h	/^struct ecryptfs_key_tfm {$/;"	s
ecryptfs_key_tfm_cache	crypto.c	/^struct kmem_cache *ecryptfs_key_tfm_cache;$/;"	v	typeref:struct:kmem_cache
ecryptfs_keyring_auth_tok_for_sig	keystore.c	/^int ecryptfs_keyring_auth_tok_for_sig(struct key **auth_tok_key,$/;"	f
ecryptfs_kill_block_super	main.c	/^static void ecryptfs_kill_block_super(struct super_block *sb)$/;"	f	file:
ecryptfs_kobj	main.c	/^static struct kobject *ecryptfs_kobj;$/;"	v	typeref:struct:kobject	file:
ecryptfs_kthread	kthread.c	/^static struct task_struct *ecryptfs_kthread;$/;"	v	typeref:struct:task_struct	file:
ecryptfs_kthread_ctl	kthread.c	/^static struct ecryptfs_kthread_ctl {$/;"	s	file:
ecryptfs_kthread_ctl	kthread.c	/^} ecryptfs_kthread_ctl;$/;"	v	typeref:struct:ecryptfs_kthread_ctl	file:
ecryptfs_link	inode.c	/^static int ecryptfs_link(struct dentry *old_dentry, struct inode *dir,$/;"	f	file:
ecryptfs_listxattr	inode.c	/^ecryptfs_listxattr(struct dentry *dentry, char *list, size_t size)$/;"	f	file:
ecryptfs_lookup	inode.c	/^static struct dentry *ecryptfs_lookup(struct inode *ecryptfs_dir_inode,$/;"	f	file:
ecryptfs_lookup_and_interpose_lower	inode.c	/^int ecryptfs_lookup_and_interpose_lower(struct dentry *ecryptfs_dentry,$/;"	f
ecryptfs_lower_header_size	ecryptfs_kernel.h	/^ecryptfs_lower_header_size(struct ecryptfs_crypt_stat *crypt_stat)$/;"	f
ecryptfs_lower_offset_for_extent	crypto.c	/^static void ecryptfs_lower_offset_for_extent(loff_t *offset, loff_t extent_num,$/;"	f	file:
ecryptfs_main_fops	file.c	/^const struct file_operations ecryptfs_main_fops = {$/;"	v	typeref:struct:file_operations
ecryptfs_main_iops	inode.c	/^const struct inode_operations ecryptfs_main_iops = {$/;"	v	typeref:struct:inode_operations
ecryptfs_message	ecryptfs_kernel.h	/^struct ecryptfs_message {$/;"	s
ecryptfs_message_buf_len	main.c	/^unsigned int ecryptfs_message_buf_len = ECRYPTFS_DEFAULT_MSG_CTX_ELEMS;$/;"	v
ecryptfs_message_wait_timeout	main.c	/^signed long ecryptfs_message_wait_timeout = ECRYPTFS_MAX_MSG_CTX_TTL \/ HZ;$/;"	v
ecryptfs_miscdev	miscdev.c	/^static struct miscdevice ecryptfs_miscdev = {$/;"	v	typeref:struct:miscdevice	file:
ecryptfs_miscdev_fops	miscdev.c	/^static const struct file_operations ecryptfs_miscdev_fops = {$/;"	v	typeref:struct:file_operations	file:
ecryptfs_miscdev_open	miscdev.c	/^ecryptfs_miscdev_open(struct inode *inode, struct file *file)$/;"	f	file:
ecryptfs_miscdev_poll	miscdev.c	/^ecryptfs_miscdev_poll(struct file *file, poll_table *pt)$/;"	f	file:
ecryptfs_miscdev_read	miscdev.c	/^ecryptfs_miscdev_read(struct file *file, char __user *buf, size_t count,$/;"	f	file:
ecryptfs_miscdev_release	miscdev.c	/^ecryptfs_miscdev_release(struct inode *inode, struct file *file)$/;"	f	file:
ecryptfs_miscdev_response	miscdev.c	/^static int ecryptfs_miscdev_response(char *data, size_t data_size,$/;"	f	file:
ecryptfs_miscdev_write	miscdev.c	/^ecryptfs_miscdev_write(struct file *file, const char __user *buf,$/;"	f	file:
ecryptfs_mkdir	inode.c	/^static int ecryptfs_mkdir(struct inode *dir, struct dentry *dentry, int mode)$/;"	f	file:
ecryptfs_mknod	inode.c	/^ecryptfs_mknod(struct inode *dir, struct dentry *dentry, int mode, dev_t dev)$/;"	f	file:
ecryptfs_mount	main.c	/^static struct dentry *ecryptfs_mount(struct file_system_type *fs_type, int flags,$/;"	f	file:
ecryptfs_mount_crypt_stat	ecryptfs_kernel.h	/^struct ecryptfs_mount_crypt_stat {$/;"	s
ecryptfs_msg_counter	messaging.c	/^static u32 ecryptfs_msg_counter;$/;"	v	file:
ecryptfs_msg_ctx	ecryptfs_kernel.h	/^struct ecryptfs_msg_ctx {$/;"	s
ecryptfs_msg_ctx_alloc_to_free	messaging.c	/^void ecryptfs_msg_ctx_alloc_to_free(struct ecryptfs_msg_ctx *msg_ctx)$/;"	f
ecryptfs_msg_ctx_arr	messaging.c	/^static struct ecryptfs_msg_ctx *ecryptfs_msg_ctx_arr;$/;"	v	typeref:struct:ecryptfs_msg_ctx	file:
ecryptfs_msg_ctx_free_to_alloc	messaging.c	/^static void ecryptfs_msg_ctx_free_to_alloc(struct ecryptfs_msg_ctx *msg_ctx)$/;"	f	file:
ecryptfs_msg_ctx_lists_mux	messaging.c	/^static struct mutex ecryptfs_msg_ctx_lists_mux;$/;"	v	typeref:struct:mutex	file:
ecryptfs_new_file_context	crypto.c	/^int ecryptfs_new_file_context(struct dentry *ecryptfs_dentry)$/;"	f
ecryptfs_num_miscdev_opens	miscdev.c	/^static atomic_t ecryptfs_num_miscdev_opens;$/;"	v	file:
ecryptfs_number_of_users	main.c	/^unsigned int ecryptfs_number_of_users = ECRYPTFS_DEFAULT_NUM_USERS;$/;"	v
ecryptfs_open	file.c	/^static int ecryptfs_open(struct inode *inode, struct file *file)$/;"	f	file:
ecryptfs_open_req	ecryptfs_kernel.h	/^struct ecryptfs_open_req {$/;"	s
ecryptfs_open_req_cache	kthread.c	/^struct kmem_cache *ecryptfs_open_req_cache;$/;"	v	typeref:struct:kmem_cache
ecryptfs_opt_cipher	main.c	/^       ecryptfs_opt_cipher, ecryptfs_opt_ecryptfs_cipher,$/;"	e	enum:__anon1	file:
ecryptfs_opt_ecryptfs_cipher	main.c	/^       ecryptfs_opt_cipher, ecryptfs_opt_ecryptfs_cipher,$/;"	e	enum:__anon1	file:
ecryptfs_opt_ecryptfs_key_bytes	main.c	/^       ecryptfs_opt_ecryptfs_key_bytes,$/;"	e	enum:__anon1	file:
ecryptfs_opt_ecryptfs_sig	main.c	/^enum { ecryptfs_opt_sig, ecryptfs_opt_ecryptfs_sig,$/;"	e	enum:__anon1	file:
ecryptfs_opt_encrypted_view	main.c	/^       ecryptfs_opt_encrypted_view, ecryptfs_opt_fnek_sig,$/;"	e	enum:__anon1	file:
ecryptfs_opt_err	main.c	/^       ecryptfs_opt_err };$/;"	e	enum:__anon1	file:
ecryptfs_opt_fn_cipher	main.c	/^       ecryptfs_opt_fn_cipher, ecryptfs_opt_fn_cipher_key_bytes,$/;"	e	enum:__anon1	file:
ecryptfs_opt_fn_cipher_key_bytes	main.c	/^       ecryptfs_opt_fn_cipher, ecryptfs_opt_fn_cipher_key_bytes,$/;"	e	enum:__anon1	file:
ecryptfs_opt_fnek_sig	main.c	/^       ecryptfs_opt_encrypted_view, ecryptfs_opt_fnek_sig,$/;"	e	enum:__anon1	file:
ecryptfs_opt_mount_auth_tok_only	main.c	/^       ecryptfs_opt_unlink_sigs, ecryptfs_opt_mount_auth_tok_only,$/;"	e	enum:__anon1	file:
ecryptfs_opt_passthrough	main.c	/^       ecryptfs_opt_passthrough, ecryptfs_opt_xattr_metadata,$/;"	e	enum:__anon1	file:
ecryptfs_opt_sig	main.c	/^enum { ecryptfs_opt_sig, ecryptfs_opt_ecryptfs_sig,$/;"	e	enum:__anon1	file:
ecryptfs_opt_unlink_sigs	main.c	/^       ecryptfs_opt_unlink_sigs, ecryptfs_opt_mount_auth_tok_only,$/;"	e	enum:__anon1	file:
ecryptfs_opt_xattr_metadata	main.c	/^       ecryptfs_opt_passthrough, ecryptfs_opt_xattr_metadata,$/;"	e	enum:__anon1	file:
ecryptfs_page_crypt_context	ecryptfs_kernel.h	/^struct ecryptfs_page_crypt_context {$/;"	s
ecryptfs_parse_options	main.c	/^static int ecryptfs_parse_options(struct ecryptfs_sb_info *sbi, char *options)$/;"	f	file:
ecryptfs_parse_packet_length	keystore.c	/^int ecryptfs_parse_packet_length(unsigned char *data, size_t *size,$/;"	f
ecryptfs_parse_packet_set	keystore.c	/^int ecryptfs_parse_packet_set(struct ecryptfs_crypt_stat *crypt_stat,$/;"	f
ecryptfs_parse_tag_70_packet	keystore.c	/^ecryptfs_parse_tag_70_packet(char **filename, size_t *filename_size,$/;"	f
ecryptfs_parse_tag_70_packet_silly_stack	keystore.c	/^struct ecryptfs_parse_tag_70_packet_silly_stack {$/;"	s	file:
ecryptfs_password	ecryptfs_kernel.h	/^struct ecryptfs_password {$/;"	s
ecryptfs_permission	inode.c	/^ecryptfs_permission(struct inode *inode, int mask, unsigned int flags)$/;"	f	file:
ecryptfs_printk	ecryptfs_kernel.h	592;"	d
ecryptfs_private_key	ecryptfs_kernel.h	/^struct ecryptfs_private_key {$/;"	s
ecryptfs_privileged_open	kthread.c	/^int ecryptfs_privileged_open(struct file **lower_file,$/;"	f
ecryptfs_process_flags	crypto.c	/^static int ecryptfs_process_flags(struct ecryptfs_crypt_stat *crypt_stat,$/;"	f	file:
ecryptfs_process_key_cipher	crypto.c	/^ecryptfs_process_key_cipher(struct crypto_blkcipher **key_tfm,$/;"	f	file:
ecryptfs_process_quit	messaging.c	/^int ecryptfs_process_quit(uid_t euid, struct user_namespace *user_ns,$/;"	f
ecryptfs_process_response	messaging.c	/^int ecryptfs_process_response(struct ecryptfs_message *msg, uid_t euid,$/;"	f
ecryptfs_put_link	inode.c	/^ecryptfs_put_link(struct dentry *dentry, struct nameidata *nd, void *ptr)$/;"	f	file:
ecryptfs_read_and_validate_header_region	crypto.c	/^int ecryptfs_read_and_validate_header_region(char *data,$/;"	f
ecryptfs_read_and_validate_xattr_region	crypto.c	/^int ecryptfs_read_and_validate_xattr_region(char *page_virt,$/;"	f
ecryptfs_read_headers_virt	crypto.c	/^static int ecryptfs_read_headers_virt(char *page_virt,$/;"	f	file:
ecryptfs_read_lower	read_write.c	/^int ecryptfs_read_lower(char *data, loff_t offset, size_t size,$/;"	f
ecryptfs_read_lower_page_segment	read_write.c	/^int ecryptfs_read_lower_page_segment(struct page *page_for_ecryptfs,$/;"	f
ecryptfs_read_metadata	crypto.c	/^int ecryptfs_read_metadata(struct dentry *ecryptfs_dentry)$/;"	f
ecryptfs_read_update_atime	file.c	/^static ssize_t ecryptfs_read_update_atime(struct kiocb *iocb,$/;"	f	file:
ecryptfs_read_xattr_region	crypto.c	/^int ecryptfs_read_xattr_region(char *page_virt, struct inode *ecryptfs_inode)$/;"	f
ecryptfs_readdir	file.c	/^static int ecryptfs_readdir(struct file *file, void *dirent, filldir_t filldir)$/;"	f	file:
ecryptfs_readlink	inode.c	/^ecryptfs_readlink(struct dentry *dentry, char __user *buf, int bufsiz)$/;"	f	file:
ecryptfs_readlink_lower	inode.c	/^static int ecryptfs_readlink_lower(struct dentry *dentry, char **buf,$/;"	f	file:
ecryptfs_readpage	mmap.c	/^static int ecryptfs_readpage(struct file *file, struct page *page)$/;"	f	file:
ecryptfs_readpages	mmap.c	/^static int ecryptfs_readpages(struct file *filp, struct address_space *mapping,$/;"	f	file:
ecryptfs_release	file.c	/^static int ecryptfs_release(struct inode *inode, struct file *file)$/;"	f	file:
ecryptfs_release_messaging	messaging.c	/^void ecryptfs_release_messaging(void)$/;"	f
ecryptfs_removexattr	inode.c	/^static int ecryptfs_removexattr(struct dentry *dentry, const char *name)$/;"	f	file:
ecryptfs_rename	inode.c	/^ecryptfs_rename(struct inode *old_dir, struct dentry *old_dentry,$/;"	f	file:
ecryptfs_rmdir	inode.c	/^static int ecryptfs_rmdir(struct inode *dir, struct dentry *dentry)$/;"	f	file:
ecryptfs_sb_info	ecryptfs_kernel.h	/^struct ecryptfs_sb_info {$/;"	s
ecryptfs_sb_info_cache	main.c	/^struct kmem_cache *ecryptfs_sb_info_cache;$/;"	v	typeref:struct:kmem_cache
ecryptfs_send_message	messaging.c	/^int ecryptfs_send_message(char *data, int data_len,$/;"	f
ecryptfs_send_message_locked	messaging.c	/^ecryptfs_send_message_locked(char *data, int data_len, u8 msg_type,$/;"	f	file:
ecryptfs_send_miscdev	miscdev.c	/^int ecryptfs_send_miscdev(char *data, size_t data_size,$/;"	f
ecryptfs_session_key	ecryptfs_kernel.h	/^struct ecryptfs_session_key {$/;"	s
ecryptfs_set_default_crypt_stat_vals	crypto.c	/^static void ecryptfs_set_default_crypt_stat_vals($/;"	f	file:
ecryptfs_set_default_sizes	crypto.c	/^void ecryptfs_set_default_sizes(struct ecryptfs_crypt_stat *crypt_stat)$/;"	f
ecryptfs_set_dentry_lower	ecryptfs_kernel.h	/^ecryptfs_set_dentry_lower(struct dentry *dentry, struct dentry *lower_dentry)$/;"	f
ecryptfs_set_dentry_lower_mnt	ecryptfs_kernel.h	/^ecryptfs_set_dentry_lower_mnt(struct dentry *dentry, struct vfsmount *lower_mnt)$/;"	f
ecryptfs_set_dentry_private	ecryptfs_kernel.h	/^ecryptfs_set_dentry_private(struct dentry *dentry,$/;"	f
ecryptfs_set_file_lower	ecryptfs_kernel.h	/^ecryptfs_set_file_lower(struct file *file, struct file *lower_file)$/;"	f
ecryptfs_set_file_private	ecryptfs_kernel.h	/^ecryptfs_set_file_private(struct file *file,$/;"	f
ecryptfs_set_inode_lower	ecryptfs_kernel.h	/^ecryptfs_set_inode_lower(struct inode *inode, struct inode *lower_inode)$/;"	f
ecryptfs_set_superblock_lower	ecryptfs_kernel.h	/^ecryptfs_set_superblock_lower(struct super_block *sb,$/;"	f
ecryptfs_set_superblock_private	ecryptfs_kernel.h	/^ecryptfs_set_superblock_private(struct super_block *sb,$/;"	f
ecryptfs_setattr	inode.c	/^static int ecryptfs_setattr(struct dentry *dentry, struct iattr *ia)$/;"	f	file:
ecryptfs_setxattr	inode.c	/^ecryptfs_setxattr(struct dentry *dentry, const char *name, const void *value,$/;"	f
ecryptfs_show_options	super.c	/^static int ecryptfs_show_options(struct seq_file *m, struct vfsmount *mnt)$/;"	f	file:
ecryptfs_sops	super.c	/^const struct super_operations ecryptfs_sops = {$/;"	v	typeref:struct:super_operations
ecryptfs_spawn_daemon	messaging.c	/^ecryptfs_spawn_daemon(struct ecryptfs_daemon **daemon, uid_t euid,$/;"	f
ecryptfs_statfs	super.c	/^static int ecryptfs_statfs(struct dentry *dentry, struct kstatfs *buf)$/;"	f	file:
ecryptfs_superblock_to_lower	ecryptfs_kernel.h	/^ecryptfs_superblock_to_lower(struct super_block *sb)$/;"	f
ecryptfs_superblock_to_private	ecryptfs_kernel.h	/^ecryptfs_superblock_to_private(struct super_block *sb)$/;"	f
ecryptfs_symlink	inode.c	/^static int ecryptfs_symlink(struct inode *dir, struct dentry *dentry,$/;"	f	file:
ecryptfs_symlink_iops	inode.c	/^const struct inode_operations ecryptfs_symlink_iops = {$/;"	v	typeref:struct:inode_operations
ecryptfs_tfm_exists	crypto.c	/^int ecryptfs_tfm_exists(char *cipher_name, struct ecryptfs_key_tfm **key_tfm)$/;"	f
ecryptfs_threadfn	kthread.c	/^static int ecryptfs_threadfn(void *ignored)$/;"	f	file:
ecryptfs_to_hex	crypto.c	/^void ecryptfs_to_hex(char *dst, char *src, size_t src_size)$/;"	f
ecryptfs_token_types	ecryptfs_kernel.h	/^enum ecryptfs_token_types {ECRYPTFS_PASSWORD, ECRYPTFS_PRIVATE_KEY};$/;"	g
ecryptfs_truncate	inode.c	/^int ecryptfs_truncate(struct dentry *dentry, loff_t new_length)$/;"	f
ecryptfs_uid_hash	messaging.c	41;"	d	file:
ecryptfs_unlink	inode.c	/^static int ecryptfs_unlink(struct inode *dir, struct dentry *dentry)$/;"	f	file:
ecryptfs_unlocked_ioctl	file.c	/^ecryptfs_unlocked_ioctl(struct file *file, unsigned int cmd, unsigned long arg)$/;"	f	file:
ecryptfs_verbosity	main.c	/^int ecryptfs_verbosity = 0;$/;"	v
ecryptfs_verify_version	keystore.c	/^static int ecryptfs_verify_version(u16 version)$/;"	f	file:
ecryptfs_wait_for_response	messaging.c	/^int ecryptfs_wait_for_response(struct ecryptfs_msg_ctx *msg_ctx,$/;"	f
ecryptfs_write	read_write.c	/^int ecryptfs_write(struct inode *ecryptfs_inode, char *data, loff_t offset,$/;"	f
ecryptfs_write2	read_write.c	/^int ecryptfs_write2(struct inode *ecryptfs_inode, char *data, loff_t offset,$/;"	f
ecryptfs_write_begin	mmap.c	/^static int ecryptfs_write_begin(struct file *file,$/;"	f	file:
ecryptfs_write_crypt_stat_flags	crypto.c	/^void ecryptfs_write_crypt_stat_flags(char *page_virt,$/;"	f
ecryptfs_write_end	mmap.c	/^static int ecryptfs_write_end(struct file *file,$/;"	f	file:
ecryptfs_write_header_metadata	crypto.c	/^ecryptfs_write_header_metadata(char *virt,$/;"	f
ecryptfs_write_headers_virt	crypto.c	/^static int ecryptfs_write_headers_virt(char *page_virt, size_t max,$/;"	f	file:
ecryptfs_write_inode_size_to_header	mmap.c	/^static int ecryptfs_write_inode_size_to_header(struct inode *ecryptfs_inode)$/;"	f	file:
ecryptfs_write_inode_size_to_metadata	mmap.c	/^int ecryptfs_write_inode_size_to_metadata(struct inode *ecryptfs_inode)$/;"	f
ecryptfs_write_inode_size_to_xattr	mmap.c	/^static int ecryptfs_write_inode_size_to_xattr(struct inode *ecryptfs_inode)$/;"	f	file:
ecryptfs_write_lower	read_write.c	/^int ecryptfs_write_lower(struct inode *ecryptfs_inode, char *data,$/;"	f
ecryptfs_write_lower_page_segment	read_write.c	/^int ecryptfs_write_lower_page_segment(struct inode *ecryptfs_inode,$/;"	f
ecryptfs_write_metadata	crypto.c	/^int ecryptfs_write_metadata(struct dentry *ecryptfs_dentry)$/;"	f
ecryptfs_write_metadata_to_contents	crypto.c	/^ecryptfs_write_metadata_to_contents(struct dentry *ecryptfs_dentry,$/;"	f	file:
ecryptfs_write_metadata_to_xattr	crypto.c	/^ecryptfs_write_metadata_to_xattr(struct dentry *ecryptfs_dentry,$/;"	f	file:
ecryptfs_write_packet_length	keystore.c	/^int ecryptfs_write_packet_length(char *dest, size_t size,$/;"	f
ecryptfs_write_tag_70_packet	keystore.c	/^ecryptfs_write_tag_70_packet(char *dest, size_t *remaining_bytes,$/;"	f
ecryptfs_write_tag_70_packet_silly_stack	keystore.c	/^struct ecryptfs_write_tag_70_packet_silly_stack {$/;"	s	file:
ecryptfs_writepage	mmap.c	/^static int ecryptfs_writepage(struct page *page, struct writeback_control *wbc)$/;"	f	file:
ecryptfs_writepages	mmap.c	/^static int ecryptfs_writepages(struct address_space *mapping,$/;"	f	file:
ecryptfs_xattr_cache	mmap.c	/^struct kmem_cache *ecryptfs_xattr_cache;$/;"	v	typeref:struct:kmem_cache
enc_key	ecryptfs_kernel.h	/^	unsigned char enc_key[ECRYPTFS_MAX_ENCRYPTED_KEY_BYTES];$/;"	m	struct:ecryptfs_key_record
enc_key_size	ecryptfs_kernel.h	/^	size_t enc_key_size;$/;"	m	struct:ecryptfs_key_record
encrypt_scatterlist	crypto.c	/^static int encrypt_scatterlist(struct ecryptfs_crypt_stat *crypt_stat,$/;"	f	file:
encrypted_filename	ecryptfs_kernel.h	/^	char *encrypted_filename;$/;"	m	struct:ecryptfs_filename
encrypted_filename_size	ecryptfs_kernel.h	/^	size_t encrypted_filename_size;$/;"	m	struct:ecryptfs_filename
encrypted_key	ecryptfs_kernel.h	/^	u8 encrypted_key[ECRYPTFS_MAX_ENCRYPTED_KEY_BYTES];$/;"	m	struct:ecryptfs_session_key
encrypted_key_size	ecryptfs_kernel.h	/^	u32 encrypted_key_size;$/;"	m	struct:ecryptfs_session_key
encrypted_session_key	ecryptfs_kernel.h	/^	unsigned char encrypted_session_key[ECRYPTFS_MAX_KEY_BYTES];$/;"	m	struct:ecryptfs_auth_tok_list_item
entries_written	file.c	/^	int entries_written;$/;"	m	struct:ecryptfs_getdents_callback	file:
euid	ecryptfs_kernel.h	/^	uid_t euid;$/;"	m	struct:ecryptfs_daemon
euid_chain	ecryptfs_kernel.h	/^	struct hlist_node euid_chain;$/;"	m	struct:ecryptfs_daemon	typeref:struct:ecryptfs_daemon::hlist_node
extent_mask	ecryptfs_kernel.h	/^	unsigned int extent_mask;$/;"	m	struct:ecryptfs_crypt_stat
extent_shift	ecryptfs_kernel.h	/^	size_t extent_shift;$/;"	m	struct:ecryptfs_crypt_stat
extent_size	ecryptfs_kernel.h	/^	size_t extent_size; \/* Data extent size; default is 4096 *\/$/;"	m	struct:ecryptfs_crypt_stat
fake_iv	crypto.c	/^static char fake_iv[ECRYPTFS_MAX_IV_BYTES];$/;"	v	file:
file_flag	crypto.c	/^	u32 file_flag;$/;"	m	struct:ecryptfs_flag_map_elem	file:
file_version	ecryptfs_kernel.h	/^	unsigned int file_version;$/;"	m	struct:ecryptfs_crypt_stat
filename	ecryptfs_kernel.h	/^	char *filename;$/;"	m	struct:ecryptfs_filename
filename_rev_map	crypto.c	/^static const unsigned char filename_rev_map[] = {$/;"	v	file:
filename_size	ecryptfs_kernel.h	/^	size_t filename_size;$/;"	m	struct:ecryptfs_filename
fill_zeros_to_end_of_page	mmap.c	/^static int fill_zeros_to_end_of_page(struct page *page, unsigned int to)$/;"	f	file:
filldir	file.c	/^	filldir_t filldir;$/;"	m	struct:ecryptfs_getdents_callback	file:
filldir_called	file.c	/^	int filldir_called;$/;"	m	struct:ecryptfs_getdents_callback	file:
flags	ecryptfs_kernel.h	/^	u32 flags;$/;"	m	struct:ecryptfs_auth_tok
flags	ecryptfs_kernel.h	/^	u32 flags;$/;"	m	struct:ecryptfs_crypt_stat
flags	ecryptfs_kernel.h	/^	u32 flags;$/;"	m	struct:ecryptfs_daemon
flags	ecryptfs_kernel.h	/^	u32 flags;$/;"	m	struct:ecryptfs_filename
flags	ecryptfs_kernel.h	/^	u32 flags;$/;"	m	struct:ecryptfs_global_auth_tok
flags	ecryptfs_kernel.h	/^	u32 flags;$/;"	m	struct:ecryptfs_mount_crypt_stat
flags	ecryptfs_kernel.h	/^	u32 flags;$/;"	m	struct:ecryptfs_open_req
flags	ecryptfs_kernel.h	/^	u32 flags;$/;"	m	struct:ecryptfs_password
flags	ecryptfs_kernel.h	/^	u32 flags;$/;"	m	struct:ecryptfs_session_key
flags	kthread.c	/^	u32 flags;$/;"	m	struct:ecryptfs_kthread_ctl	file:
fnek_sig	ecryptfs_kernel.h	/^	char fnek_sig[ECRYPTFS_SIG_SIZE_HEX];$/;"	m	struct:ecryptfs_filename
fnek_sig_hex	keystore.c	/^	char fnek_sig_hex[ECRYPTFS_SIG_SIZE_HEX + 1];$/;"	m	struct:ecryptfs_parse_tag_70_packet_silly_stack	file:
global_auth_tok	ecryptfs_kernel.h	/^	struct ecryptfs_auth_tok *global_auth_tok;$/;"	m	struct:ecryptfs_global_auth_tok	typeref:struct:ecryptfs_global_auth_tok::ecryptfs_auth_tok
global_auth_tok_key	ecryptfs_kernel.h	/^	struct key *global_auth_tok_key;$/;"	m	struct:ecryptfs_global_auth_tok	typeref:struct:ecryptfs_global_auth_tok::key
global_auth_tok_list	ecryptfs_kernel.h	/^	struct list_head global_auth_tok_list;$/;"	m	struct:ecryptfs_mount_crypt_stat	typeref:struct:ecryptfs_mount_crypt_stat::list_head
global_auth_tok_list_mutex	ecryptfs_kernel.h	/^	struct mutex global_auth_tok_list_mutex;$/;"	m	struct:ecryptfs_mount_crypt_stat	typeref:struct:ecryptfs_mount_crypt_stat::mutex
global_default_cipher_key_size	ecryptfs_kernel.h	/^	size_t global_default_cipher_key_size;$/;"	m	struct:ecryptfs_mount_crypt_stat
global_default_cipher_name	ecryptfs_kernel.h	/^	unsigned char global_default_cipher_name[ECRYPTFS_MAX_CIPHER_NAME_SIZE$/;"	m	struct:ecryptfs_mount_crypt_stat
global_default_fn_cipher_key_bytes	ecryptfs_kernel.h	/^	size_t global_default_fn_cipher_key_bytes;$/;"	m	struct:ecryptfs_mount_crypt_stat
global_default_fn_cipher_name	ecryptfs_kernel.h	/^	unsigned char global_default_fn_cipher_name[$/;"	m	struct:ecryptfs_mount_crypt_stat
global_default_fnek_sig	ecryptfs_kernel.h	/^	char global_default_fnek_sig[ECRYPTFS_SIG_SIZE_HEX + 1];$/;"	m	struct:ecryptfs_mount_crypt_stat
grow_file	inode.c	/^static int grow_file(struct dentry *ecryptfs_dentry)$/;"	f	file:
hash	keystore.c	/^	char hash[ECRYPTFS_TAG_70_DIGEST_SIZE];$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	file:
hash_algo	ecryptfs_kernel.h	/^	s32 hash_algo;$/;"	m	struct:ecryptfs_password
hash_desc	keystore.c	/^	struct hash_desc hash_desc;$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	typeref:struct:ecryptfs_write_tag_70_packet_silly_stack::hash_desc	file:
hash_iterations	ecryptfs_kernel.h	/^	u32 hash_iterations;$/;"	m	struct:ecryptfs_password
hash_sg	keystore.c	/^	struct scatterlist hash_sg;$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	typeref:struct:ecryptfs_write_tag_70_packet_silly_stack::scatterlist	file:
hash_tfm	ecryptfs_kernel.h	/^	struct crypto_hash *hash_tfm; \/* Crypto context for generating$/;"	m	struct:ecryptfs_crypt_stat	typeref:struct:ecryptfs_crypt_stat::crypto_hash
i	keystore.c	/^	size_t i;$/;"	m	struct:ecryptfs_parse_tag_70_packet_silly_stack	file:
i	keystore.c	/^	size_t i;$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	file:
index	ecryptfs_kernel.h	/^	u32 index;$/;"	m	struct:ecryptfs_message
index	ecryptfs_kernel.h	/^	u32 index;$/;"	m	struct:ecryptfs_msg_ctx
inode_info_init_once	main.c	/^inode_info_init_once(void *vptr)$/;"	f	file:
iv	keystore.c	/^	char iv[ECRYPTFS_MAX_IV_BYTES];$/;"	m	struct:ecryptfs_parse_tag_70_packet_silly_stack	file:
iv	keystore.c	/^	char iv[ECRYPTFS_MAX_IV_BYTES];$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	file:
iv_bytes	ecryptfs_kernel.h	/^	size_t iv_bytes;$/;"	m	struct:ecryptfs_crypt_stat
j	keystore.c	/^	size_t j;$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	file:
key	ecryptfs_kernel.h	/^	unsigned char key[ECRYPTFS_MAX_KEY_BYTES];$/;"	m	struct:ecryptfs_crypt_stat
key_size	ecryptfs_kernel.h	/^	size_t key_size;$/;"	m	struct:ecryptfs_crypt_stat
key_size	ecryptfs_kernel.h	/^	size_t key_size;$/;"	m	struct:ecryptfs_key_tfm
key_size	ecryptfs_kernel.h	/^	u32 key_size;$/;"	m	struct:ecryptfs_private_key
key_tfm	ecryptfs_kernel.h	/^	struct crypto_blkcipher *key_tfm;$/;"	m	struct:ecryptfs_key_tfm	typeref:struct:ecryptfs_key_tfm::crypto_blkcipher
key_tfm_list	crypto.c	/^static struct list_head key_tfm_list;$/;"	v	typeref:struct:list_head	file:
key_tfm_list	ecryptfs_kernel.h	/^	struct list_head key_tfm_list;$/;"	m	struct:ecryptfs_key_tfm	typeref:struct:ecryptfs_key_tfm::list_head
key_tfm_list_mutex	crypto.c	/^struct mutex key_tfm_list_mutex;$/;"	v	typeref:struct:mutex
key_tfm_mutex	ecryptfs_kernel.h	/^	struct mutex key_tfm_mutex;$/;"	m	struct:ecryptfs_key_tfm	typeref:struct:ecryptfs_key_tfm::mutex
keysig	ecryptfs_kernel.h	/^	char keysig[ECRYPTFS_SIG_SIZE_HEX];$/;"	m	struct:ecryptfs_key_sig
keysig_list	ecryptfs_kernel.h	/^	struct list_head keysig_list;$/;"	m	struct:ecryptfs_crypt_stat	typeref:struct:ecryptfs_crypt_stat::list_head
keysig_list_mutex	ecryptfs_kernel.h	/^	struct mutex keysig_list_mutex;$/;"	m	struct:ecryptfs_crypt_stat	typeref:struct:ecryptfs_crypt_stat::mutex
kthread_ctl_list	ecryptfs_kernel.h	/^	struct list_head kthread_ctl_list;$/;"	m	struct:ecryptfs_open_req	typeref:struct:ecryptfs_open_req::list_head
list	ecryptfs_kernel.h	/^	struct list_head list;$/;"	m	struct:ecryptfs_auth_tok_list	typeref:struct:ecryptfs_auth_tok_list::list_head
list	ecryptfs_kernel.h	/^	struct list_head list;$/;"	m	struct:ecryptfs_auth_tok_list_item	typeref:struct:ecryptfs_auth_tok_list_item::list_head
local_flag	crypto.c	/^	u32 local_flag;$/;"	m	struct:ecryptfs_flag_map_elem	file:
lock_parent	inode.c	/^static struct dentry *lock_parent(struct dentry *dentry)$/;"	f	file:
lower_dentry	ecryptfs_kernel.h	/^	struct dentry *lower_dentry;$/;"	m	struct:ecryptfs_open_req	typeref:struct:ecryptfs_open_req::dentry
lower_file	ecryptfs_kernel.h	/^		struct file *lower_file;$/;"	m	union:ecryptfs_page_crypt_context::__anon3	typeref:struct:ecryptfs_page_crypt_context::__anon3::file
lower_file	ecryptfs_kernel.h	/^	struct file **lower_file;$/;"	m	struct:ecryptfs_open_req	typeref:struct:ecryptfs_open_req::file
lower_file	ecryptfs_kernel.h	/^	struct file *lower_file;$/;"	m	struct:ecryptfs_inode_info	typeref:struct:ecryptfs_inode_info::file
lower_file_mutex	ecryptfs_kernel.h	/^	struct mutex lower_file_mutex;$/;"	m	struct:ecryptfs_inode_info	typeref:struct:ecryptfs_inode_info::mutex
lower_mnt	ecryptfs_kernel.h	/^	struct vfsmount *lower_mnt;$/;"	m	struct:ecryptfs_open_req	typeref:struct:ecryptfs_open_req::vfsmount
lower_path	ecryptfs_kernel.h	/^	struct path lower_path;$/;"	m	struct:ecryptfs_dentry_info	typeref:struct:ecryptfs_dentry_info::path
max_packet_size	keystore.c	/^	size_t max_packet_size;$/;"	m	struct:ecryptfs_parse_tag_70_packet_silly_stack	file:
max_packet_size	keystore.c	/^	size_t max_packet_size;$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	file:
metadata_size	ecryptfs_kernel.h	/^	size_t metadata_size;$/;"	m	struct:ecryptfs_crypt_stat
mode	ecryptfs_kernel.h	/^	unsigned int mode;$/;"	m	struct:ecryptfs_page_crypt_context
mount_crypt_stat	ecryptfs_kernel.h	/^	struct ecryptfs_mount_crypt_stat *mount_crypt_stat;$/;"	m	struct:ecryptfs_crypt_stat	typeref:struct:ecryptfs_crypt_stat::ecryptfs_mount_crypt_stat
mount_crypt_stat	ecryptfs_kernel.h	/^	struct ecryptfs_mount_crypt_stat mount_crypt_stat;$/;"	m	struct:ecryptfs_sb_info	typeref:struct:ecryptfs_sb_info::ecryptfs_mount_crypt_stat
mount_crypt_stat_list	ecryptfs_kernel.h	/^	struct list_head mount_crypt_stat_list;$/;"	m	struct:ecryptfs_global_auth_tok	typeref:struct:ecryptfs_global_auth_tok::list_head
msg	ecryptfs_kernel.h	/^	struct ecryptfs_message *msg;$/;"	m	struct:ecryptfs_msg_ctx	typeref:struct:ecryptfs_msg_ctx::ecryptfs_message
msg_ctx_out_queue	ecryptfs_kernel.h	/^	struct list_head msg_ctx_out_queue;$/;"	m	struct:ecryptfs_daemon	typeref:struct:ecryptfs_daemon::list_head
msg_size	ecryptfs_kernel.h	/^	size_t msg_size;$/;"	m	struct:ecryptfs_msg_ctx
mux	ecryptfs_kernel.h	/^	struct mutex mux;$/;"	m	struct:ecryptfs_daemon	typeref:struct:ecryptfs_daemon::mutex
mux	ecryptfs_kernel.h	/^	struct mutex mux;$/;"	m	struct:ecryptfs_msg_ctx	typeref:struct:ecryptfs_msg_ctx::mutex
mux	ecryptfs_kernel.h	/^	struct mutex mux;$/;"	m	struct:ecryptfs_open_req	typeref:struct:ecryptfs_open_req::mutex
mux	kthread.c	/^	struct mutex mux;$/;"	m	struct:ecryptfs_kthread_ctl	typeref:struct:ecryptfs_kthread_ctl::mutex	file:
name	main.c	/^	const char *name;$/;"	m	struct:ecryptfs_cache_info	file:
node	ecryptfs_kernel.h	/^	struct list_head node;$/;"	m	struct:ecryptfs_msg_ctx	typeref:struct:ecryptfs_msg_ctx::list_head
num_global_auth_toks	ecryptfs_kernel.h	/^	size_t num_global_auth_toks;$/;"	m	struct:ecryptfs_mount_crypt_stat
num_queued_msg_ctx	ecryptfs_kernel.h	/^	u32 num_queued_msg_ctx;$/;"	m	struct:ecryptfs_daemon
num_rand_bytes	keystore.c	/^	size_t num_rand_bytes;$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	file:
packet_size_len	keystore.c	/^	size_t packet_size_len;$/;"	m	struct:ecryptfs_parse_tag_70_packet_silly_stack	file:
packet_size_len	keystore.c	/^	size_t packet_size_len;$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	file:
page	ecryptfs_kernel.h	/^	struct page *page;$/;"	m	struct:ecryptfs_page_crypt_context	typeref:struct:ecryptfs_page_crypt_context::page
param	ecryptfs_kernel.h	/^	} param;$/;"	m	struct:ecryptfs_page_crypt_context	typeref:union:ecryptfs_page_crypt_context::__anon3
parse_header_metadata	crypto.c	/^static int parse_header_metadata(struct ecryptfs_crypt_stat *crypt_stat,$/;"	f	file:
parse_tag_11_packet	keystore.c	/^parse_tag_11_packet(unsigned char *data, unsigned char *contents,$/;"	f	file:
parse_tag_1_packet	keystore.c	/^parse_tag_1_packet(struct ecryptfs_crypt_stat *crypt_stat,$/;"	f	file:
parse_tag_3_packet	keystore.c	/^parse_tag_3_packet(struct ecryptfs_crypt_stat *crypt_stat,$/;"	f	file:
parse_tag_65_packet	keystore.c	/^parse_tag_65_packet(struct ecryptfs_session_key *session_key, u8 *cipher_code,$/;"	f	file:
parse_tag_67_packet	keystore.c	/^parse_tag_67_packet(struct ecryptfs_key_record *key_rec,$/;"	f	file:
parsed_tag_70_packet_size	keystore.c	/^	size_t parsed_tag_70_packet_size;$/;"	m	struct:ecryptfs_parse_tag_70_packet_silly_stack	file:
password	ecryptfs_kernel.h	/^		struct ecryptfs_password password;$/;"	m	union:ecryptfs_auth_tok::__anon2	typeref:struct:ecryptfs_auth_tok::__anon2::ecryptfs_password
password_bytes	ecryptfs_kernel.h	/^	u32 password_bytes;$/;"	m	struct:ecryptfs_password
pid	ecryptfs_kernel.h	/^	struct pid *pid;$/;"	m	struct:ecryptfs_daemon	typeref:struct:ecryptfs_daemon::pid
pki_encrypt_session_key	keystore.c	/^pki_encrypt_session_key(struct ecryptfs_auth_tok *auth_tok,$/;"	f	file:
pki_type	ecryptfs_kernel.h	/^	char pki_type[ECRYPTFS_MAX_PKI_NAME_BYTES + 1];$/;"	m	struct:ecryptfs_private_key
portable_filename_chars	crypto.c	/^static unsigned char *portable_filename_chars = ("-.0123456789ABCD"$/;"	v	file:
private_key	ecryptfs_kernel.h	/^		struct ecryptfs_private_key private_key;$/;"	m	union:ecryptfs_auth_tok::__anon2	typeref:struct:ecryptfs_auth_tok::__anon2::ecryptfs_private_key
process_request_key_err	keystore.c	/^static int process_request_key_err(long err_code)$/;"	f	file:
req_list	kthread.c	/^	struct list_head req_list;$/;"	m	struct:ecryptfs_kthread_ctl	typeref:struct:ecryptfs_kthread_ctl::list_head	file:
reserved	ecryptfs_kernel.h	/^	u8 reserved[32];$/;"	m	struct:ecryptfs_auth_tok
root_iv	ecryptfs_kernel.h	/^	unsigned char root_iv[ECRYPTFS_MAX_IV_BYTES];$/;"	m	struct:ecryptfs_crypt_stat
salt	ecryptfs_kernel.h	/^	u8 salt[ECRYPTFS_SALT_SIZE];$/;"	m	struct:ecryptfs_password
seq_no	ecryptfs_kernel.h	/^	u32 seq_no;$/;"	m	struct:ecryptfs_filename
session_key	ecryptfs_kernel.h	/^	struct ecryptfs_session_key session_key;$/;"	m	struct:ecryptfs_auth_tok	typeref:struct:ecryptfs_auth_tok::ecryptfs_session_key
session_key_encryption_key	ecryptfs_kernel.h	/^	u8 session_key_encryption_key[ECRYPTFS_MAX_KEY_BYTES];$/;"	m	struct:ecryptfs_password
session_key_encryption_key_bytes	ecryptfs_kernel.h	/^	u32 session_key_encryption_key_bytes;$/;"	m	struct:ecryptfs_password
set_default_header_data	crypto.c	/^static void set_default_header_data(struct ecryptfs_crypt_stat *crypt_stat)$/;"	f	file:
set_extent_mask_and_shift	crypto.c	/^static void set_extent_mask_and_shift(struct ecryptfs_crypt_stat *crypt_stat)$/;"	f	file:
sig	ecryptfs_kernel.h	/^	unsigned char sig[ECRYPTFS_SIG_SIZE];$/;"	m	struct:ecryptfs_key_record
sig	ecryptfs_kernel.h	/^	unsigned char sig[ECRYPTFS_SIG_SIZE_HEX + 1];$/;"	m	struct:ecryptfs_global_auth_tok
signature	ecryptfs_kernel.h	/^	u8 signature[ECRYPTFS_PASSWORD_SIG_SIZE + 1];$/;"	m	struct:ecryptfs_password
signature	ecryptfs_kernel.h	/^	u8 signature[ECRYPTFS_PASSWORD_SIG_SIZE + 1];$/;"	m	struct:ecryptfs_private_key
size	main.c	/^	size_t size;$/;"	m	struct:ecryptfs_cache_info	file:
src_sg	keystore.c	/^	struct scatterlist src_sg;$/;"	m	struct:ecryptfs_parse_tag_70_packet_silly_stack	typeref:struct:ecryptfs_parse_tag_70_packet_silly_stack::scatterlist	file:
src_sg	keystore.c	/^	struct scatterlist src_sg;$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	typeref:struct:ecryptfs_write_tag_70_packet_silly_stack::scatterlist	file:
state	ecryptfs_kernel.h	/^	u8 state;$/;"	m	struct:ecryptfs_msg_ctx
strip_xattr_flag	mmap.c	/^static void strip_xattr_flag(char *page_virt,$/;"	f	file:
task	ecryptfs_kernel.h	/^	struct task_struct *task;$/;"	m	struct:ecryptfs_daemon	typeref:struct:ecryptfs_daemon::task_struct
task	ecryptfs_kernel.h	/^	struct task_struct *task;$/;"	m	struct:ecryptfs_msg_ctx	typeref:struct:ecryptfs_msg_ctx::task_struct
tfm	ecryptfs_kernel.h	/^	struct crypto_blkcipher *tfm;$/;"	m	struct:ecryptfs_crypt_stat	typeref:struct:ecryptfs_crypt_stat::crypto_blkcipher
tfm_mutex	keystore.c	/^	struct mutex *tfm_mutex;$/;"	m	struct:ecryptfs_parse_tag_70_packet_silly_stack	typeref:struct:ecryptfs_parse_tag_70_packet_silly_stack::mutex	file:
tfm_mutex	keystore.c	/^	struct mutex *tfm_mutex;$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	typeref:struct:ecryptfs_write_tag_70_packet_silly_stack::mutex	file:
tmp_hash	keystore.c	/^	char tmp_hash[ECRYPTFS_TAG_70_DIGEST_SIZE];$/;"	m	struct:ecryptfs_write_tag_70_packet_silly_stack	file:
token	ecryptfs_kernel.h	/^	} token;$/;"	m	struct:ecryptfs_auth_tok	typeref:union:ecryptfs_auth_tok::__anon2
token_type	ecryptfs_kernel.h	/^	u16 token_type;$/;"	m	struct:ecryptfs_auth_tok
tokens	main.c	/^static const match_table_t tokens = {$/;"	v	file:
truncate_upper	inode.c	/^static int truncate_upper(struct dentry *dentry, struct iattr *ia,$/;"	f	file:
type	ecryptfs_kernel.h	/^	u8 type;$/;"	m	struct:ecryptfs_msg_ctx
type	ecryptfs_kernel.h	/^	unsigned char type;$/;"	m	struct:ecryptfs_key_record
unlock_dir	inode.c	/^static void unlock_dir(struct dentry *dir)$/;"	f	file:
upper_size_to_lower_size	inode.c	/^upper_size_to_lower_size(struct ecryptfs_crypt_stat *crypt_stat,$/;"	f	file:
user_ns	ecryptfs_kernel.h	/^	struct user_namespace *user_ns;$/;"	m	struct:ecryptfs_daemon	typeref:struct:ecryptfs_daemon::user_namespace
version	ecryptfs_kernel.h	/^	u16 version; \/* 8-bit major and 8-bit minor *\/$/;"	m	struct:ecryptfs_auth_tok
version_attr	main.c	/^static struct kobj_attribute version_attr = __ATTR_RO(version);$/;"	v	typeref:struct:kobj_attribute	file:
version_show	main.c	/^static ssize_t version_show(struct kobject *kobj,$/;"	f	file:
vfs_inode	ecryptfs_kernel.h	/^	struct inode vfs_inode;$/;"	m	struct:ecryptfs_inode_info	typeref:struct:ecryptfs_inode_info::inode
virt_to_scatterlist	crypto.c	/^int virt_to_scatterlist(const void *addr, int size, struct scatterlist *sg,$/;"	f
wait	ecryptfs_kernel.h	/^	wait_queue_head_t wait;$/;"	m	struct:ecryptfs_daemon
wait	ecryptfs_kernel.h	/^	wait_queue_head_t wait;$/;"	m	struct:ecryptfs_open_req
wait	kthread.c	/^	wait_queue_head_t wait;$/;"	m	struct:ecryptfs_kthread_ctl	file:
wbc	ecryptfs_kernel.h	/^		struct writeback_control *wbc;$/;"	m	union:ecryptfs_page_crypt_context::__anon3	typeref:struct:ecryptfs_page_crypt_context::__anon3::writeback_control
wfi_file	ecryptfs_kernel.h	/^	struct file *wfi_file;$/;"	m	struct:ecryptfs_file_info	typeref:struct:ecryptfs_file_info::file
wii_inode	ecryptfs_kernel.h	/^	struct inode *wii_inode;$/;"	m	struct:ecryptfs_inode_info	typeref:struct:ecryptfs_inode_info::inode
wipe_auth_tok_list	keystore.c	/^static void wipe_auth_tok_list(struct list_head *auth_tok_list_head)$/;"	f	file:
write_ecryptfs_marker	crypto.c	/^static void write_ecryptfs_marker(char *page_virt, size_t *written)$/;"	f	file:
write_tag_11_packet	keystore.c	/^write_tag_11_packet(char *dest, size_t *remaining_bytes, char *contents,$/;"	f	file:
write_tag_1_packet	keystore.c	/^write_tag_1_packet(char *dest, size_t *remaining_bytes,$/;"	f	file:
write_tag_3_packet	keystore.c	/^write_tag_3_packet(char *dest, size_t *remaining_bytes,$/;"	f	file:
write_tag_64_packet	keystore.c	/^write_tag_64_packet(char *signature, struct ecryptfs_session_key *session_key,$/;"	f	file:
write_tag_66_packet	keystore.c	/^write_tag_66_packet(char *signature, u8 cipher_code,$/;"	f	file:
wsi_sb	ecryptfs_kernel.h	/^	struct super_block *wsi_sb;$/;"	m	struct:ecryptfs_sb_info	typeref:struct:ecryptfs_sb_info::super_block
